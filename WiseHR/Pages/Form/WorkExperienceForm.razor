@page "/workExperience"
@using WiseHRServer.Models
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using System.Text.Json;
@using Components.sidebar
@layout HomeLayout

<MudContainer MaxWidth="MaxWidth.Medium"  >
    <MudCard Elevation="2" Class="p-2">
            <MudCardHeader>
                <MudText Typo="Typo.h5" Color="Color.Primary" Class="font-weight-bold">
                    EXPERIENCE DETAILS
                </MudText>
            </MudCardHeader>

    <MudCardContent   Margin="Margin.Dense" Dense="true">

        <EditForm Model="@experience" OnValidSubmit="@SubmitForm">
            <DataAnnotationsValidator />
            @* <ValidationSummary /> *@
            <!-- Employee ID -->    <!-- Employee ID -->
    @* <MudGrid Gutter="3"> *@
    @*     <MudItem xs="12"> *@
    @*                         <MudTextField Label="Employee ID" *@
    @*                                       @bind-Value="experience.EmployeeID" *@
    @*                                       Variant="Variant.Outlined" *@
    @*                                       Required="true" *@
    @*                                       Disabled="true" *@
    @*                                       Margin="Margin.Dense" *@
    @*                                       HelperText="Enter your Employee ID" /> *@
    @*         <ValidationMessage For="@(() => experience.EmployeeID)" class="text-danger" /> *@
    @*     </MudItem> *@
    @* </MudGrid> *@

<!-- Education Qualifications Section -->
    <h4 class="text-secondary mt-2">Education Qualifications</h4>
    @foreach (var edu in educationList)
    {
        <div class="border p-2 mb-1 bg-light rounded">
            <div class="row g-1">
                <div class="col-md-3">
                    <label>Qualification</label>
                    <InputText class="form-control" @bind-Value="edu.Qualification" />
                </div>
                <div class="col-md-3">
                    <label>University</label>
                    <InputText class="form-control" @bind-Value="edu.University" />
                </div>
                            <div class="col-md-2">
                                <label>Year</label>
                                <InputSelect class="form-control" @bind-Value="edu.YearOfPassing">
                                    <option value="">Select Year</option>
                                    @foreach (var year in YearList)
                                    {
                                        <option value="@year">@year</option>
                                    }
                                </InputSelect>
                            </div>

                <div class="col-md-2">
                    <label>Percentage</label>
                    <InputNumber class="form-control" @bind-Value="edu.Percentage" />
                </div>
                <div class="col-1 d-flex align-items-end">
                    <span class="text-danger fs-4 cursor-pointer" title="Remove" @onclick="() => RemoveEducation(edu)">
                        &times;
                    </span>
                </div>
            </div>
        </div>
    }
    <button type="button" class="btn btn-outline-primary mb-4 mt-1" @onclick="AddEducation">+ Add Education</button>

    <!-- Work Experience Section -->
    <h4 class="text-secondary mt-1">Work Experience</h4>
    @foreach (var work in workList)
    {
        <div class="border p-2 mb-2 bg-light rounded">
            <div class="row g-1">
                <div class="col-md-3">
                    <label>Employer</label>
                    <InputText class="form-control" @bind-Value="work.Employer" />
                </div>
                <div class="col-md-3">
                    <label>Location</label>
                    <InputText class="form-control" @bind-Value="work.Location" />
                </div>
                <div class="col-md-2">
                    <label>Join Date</label>
                    <InputDate class="form-control" @bind-Value="work.DateOfJoining" />
                </div>
                <div class="col-md-2">
                    <label>Leave Date</label>
                    <InputDate class="form-control" @bind-Value="work.DateOfLeaving" />
                </div>
                <div class="col-md-3">
                    <label>Designation</label>
                    <InputText class="form-control" @bind-Value="work.Designation" />
                </div>
                <div class="col-1 d-flex align-items-end">
                    <span class="text-danger fs-4 cursor-pointer" title="Remove" @onclick="() => RemoveWork(work)">
                        &times;
                    </span>
                </div>
            </div>
        </div>
    }
    <button type="button" class="btn btn-outline-primary mb-1 mt-1" @onclick="AddWork">+ Add Work Experience</button>
    <!-- Action Buttons -->
      <MudItem xs="12" Class="d-flex justify-end mt-1 gap-3">
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="GoBack">
                Back
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">
                Next
            </MudButton>
      </MudItem>
</EditForm>
        </MudCardContent>
    </MudCard>
</MudContainer>
@code {
    private Experience experience = new Experience();
    private List<Education> educationList = new List<Education>();
    private List<WorkExperience> workList = new List<WorkExperience>();

    [Inject]
    private ExperienceService ExperienceService { get; set; }

    [Parameter]
    public EventCallback<Experience> OnSubmit { get; set; }

    [Parameter]
    public EventCallback OnBack { get; set; }

    [Parameter]
    public Experience InitialData { get; set; }
    private EditContext editContext;
    private List<int> YearList = new();

    protected override void OnInitialized()
    {
        int currentYear = DateTime.Now.Year;
        for (int year = currentYear; year >= 1980; year--)
        {
            YearList.Add(year);
        }
    }

    protected async override Task OnInitializedAsync()
    {
        //var employeeDetailsJson = await JSRuntime.InvokeAsync<string>("localStorageHelper.getItem", "employeeDetails");
        var employeeDetailsJson = await JSRuntime.InvokeAsync<string>("sessionStorageHelper.getItem", "employeeDetails");


        if (!string.IsNullOrEmpty(employeeDetailsJson))
        {
            var employeeDetails = JsonSerializer.Deserialize<EmployeeDetails>(employeeDetailsJson);

            if (employeeDetails != null)
            {
                string employeeId = employeeDetails.EmployeeID;
                experience.EmployeeID = employeeId;
            }
        }
        editContext = new EditContext(experience);  // Initialize EditContext for validation

        await LoadExperienceInfo();

        if (InitialData != null)
        {
            experience = InitialData;
        }
    }

    private async Task SubmitForm()
    {
        experience.EducationQualifications = educationList;
        experience.WorkExperiences = workList;

        Console.WriteLine($"Education List: {JsonSerializer.Serialize(educationList)}");
        Console.WriteLine($"Work Experience List: {JsonSerializer.Serialize(workList)}");

        // Serialize the Experience object and save it to localStorage
        var json = JsonSerializer.Serialize(experience);  // Serialize the entire Experience object, including the lists
        await JSRuntime.InvokeVoidAsync("sessionStorageHelper.setItem", "experienceDetails", json);

        //await JSRuntime.InvokeVoidAsync("localStorageHelper.setItem", "experienceDetails", json); // Save to localStorage
        Console.WriteLine("Form submitted and data saved to localStorage");

        NavigationManager.NavigateTo("/confirmation");  // Navigate to a confirmation page or another step
    }

    private void AddEducation()
    {
        educationList.Add(new Education());
    }

    private void RemoveEducation(Education education)
    {
        educationList.Remove(education);
    }

    private void AddWork()
    {
        workList.Add(new WorkExperience());
    }

    private void RemoveWork(WorkExperience work)
    {
        workList.Remove(work);
    }

    private async Task LoadExperienceInfo()
    {
       //  var experienceJson = await JSRuntime.InvokeAsync<string>("localStorageHelper.getItem", "experienceDetails");
       var experienceJson = await JSRuntime.InvokeAsync<string>("sessionStorageHelper.getItem", "experienceDetails");


        if (!string.IsNullOrEmpty(experienceJson))
        {
            experience = JsonSerializer.Deserialize<Experience>(experienceJson);

            educationList = experience.EducationQualifications ?? new List<Education>();  // Deserialize Education list
            workList = experience.WorkExperiences ?? new List<WorkExperience>();  // Deserialize Work Experience list

            StateHasChanged();  // Ensure UI updates with the deserialized data
        }
        else
        {
            AddEducation();  // If no data found, add a default education entry
            AddWork();  // If no data found, add a default work entry
        }
    }

    private async Task GoBack()
    {
        experience.EducationQualifications = educationList;
        experience.WorkExperiences = workList;

        // Store updated experience data in localStorage
        await JSRuntime.InvokeVoidAsync("sessionStorageHelper.setItem", "experienceDetails", JsonSerializer.Serialize(experience));

       //await JSRuntime.InvokeVoidAsync("localStorageHelper.setItem", "experienceDetails", JsonSerializer.Serialize(experience));
        await OnBack.InvokeAsync();  // Trigger the OnBack callback
        NavigationManager.NavigateTo("/bankingForm");

    }
    public void Reset()
    {
        experience = new Experience();
        educationList = new List<Education>();
        workList = new List<WorkExperience>();
        AddEducation();
        AddWork();
    }
}