@page "/holidays"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@implements IDisposable
@using HolidayApp.Models

<h3>Holiday List</h3>

<div class="holiday-boxes">
    <div class="permanent-holidays">
        <h4>Permanent Holidays</h4>
        <table class="holiday-table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Day</th>
                    <th>Event</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var holiday in PermanentHolidays.OrderByDescending(h => DateTime.Parse(h.Date)))
                {
                    <tr>
                        <td>@FormatDateWithoutDay(holiday.Date)</td>
                        <td>@GetDayOfWeek(holiday.Date)</td>
                        <td>@holiday.Description</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="optional-holidays">
        <h4>Optional Holidays</h4>
        <table class="holiday-table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Day</th>
                    <th>Event</th>
                    <th>Select<br>(Max 2 Days)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var holiday in OptionalHolidays.OrderByDescending(h => DateTime.Parse(h.Date)))
                {
                    <tr>
                        <td>@FormatDateWithoutDay(holiday.Date)</td>
                        <td>@GetDayOfWeek(holiday.Date)</td>
                        <td>@holiday.Description</td>
                        <td>
                            <input type="checkbox"
                                   @bind="holiday.IsSelected"
                                   @bind:after="async () => await UpdateSelectionAsync()"
                                   disabled="@IsCheckboxDisabled(holiday)" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @if (SelectedCount > 0)
        {
            <div class="save-section">
                <button class="save-button" @onclick="SaveSelectionAsync">Save Selection (@SelectedCount selected)</button>
            </div>
        }
    </div>
</div>

@if (IsSnackbarVisible)
{
    <div class="snackbar success">
        Successfully saved optional holidays!
    </div>
}

@if (IsLoading)
{
    <p>Loading holidays...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="error-message">@ErrorMessage</p>
}
else if (AllHolidays.Length == 0)
{
    <p>No holidays found for 2025.</p>
}

@code {
    private static readonly int MaxSelections = 2;
    private static readonly int SnackbarDurationMs = 2000;
    private static readonly double RefreshIntervalMs = 10000000;

    private Event[] AllHolidays { get; set; } = Array.Empty<Event>();
    private Event[] PermanentHolidays { get; set; } = Array.Empty<Event>();
    private Event[] OptionalHolidays { get; set; } = Array.Empty<Event>();
    private Event[] SavedHolidays { get; set; } = Array.Empty<Event>();
    private string? ErrorMessage { get; set; }
    private bool IsLoading { get; set; } = true;
    private bool IsSnackbarVisible { get; set; }
    private System.Timers.Timer? _refreshTimer;
    private int SelectedCount => OptionalHolidays.Count(h => h.IsSelected);
    private DateTime CurrentDate { get; set; } = DateTime.Now.Date;
    protected override async Task OnInitializedAsync()
    {
        await FetchHolidaysAsync();

        _refreshTimer = new System.Timers.Timer(RefreshIntervalMs);
        _refreshTimer.Elapsed += async (sender, e) => await RefreshHolidaysAsync();
        _refreshTimer.AutoReset = true;
        _refreshTimer.Start();
    }

    // Fetches holidays from the API and updates the component state.
    private async Task FetchHolidaysAsync()
    {
        try
        {
            IsLoading = true;
            const string savedHolidaysUrl = "http://localhost:5243/api/SavedHolidays";
            var savedResponse = await HttpClient.GetAsync(savedHolidaysUrl);
            SavedHolidays = await savedResponse.Content.ReadFromJsonAsync<Event[]>() ?? Array.Empty<Event>();

            const string eventsUrl = "http://localhost:5243/api/Events";
            var httpResponse = await HttpClient.GetAsync(eventsUrl);

            if (httpResponse.IsSuccessStatusCode)
            {
                AllHolidays = await httpResponse.Content.ReadFromJsonAsync<Event[]>() ?? Array.Empty<Event>();
                foreach (var holiday in AllHolidays)
                {
                    var savedHoliday = SavedHolidays.FirstOrDefault(s => s.Date == holiday.Date);
                    if (savedHoliday != null)
                    {
                        holiday.IsSelected = true;
                    }
                }
                PermanentHolidays = AllHolidays.Where(h => h.HolidayType == "Permanent").ToArray();
                OptionalHolidays = AllHolidays.Where(h => h.HolidayType == "Optional").ToArray();
            }
            else
            {
                ErrorMessage = $"API request failed with status: {httpResponse.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error fetching holidays: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    // Refreshes holidays based on the current date.
    private async Task RefreshHolidaysAsync()
    {
        CurrentDate = DateTime.Now.Date;
        await FetchHolidaysAsync();
        await InvokeAsync(StateHasChanged);
    }

    // Checks if a date is in the future.
    private bool IsFutureDate(string date)
    {
        if (DateTime.TryParse(date, out DateTime parsedDate))
        {
            return parsedDate.Date > CurrentDate;
        }
        return false;
    }

    // Determines if a checkbox should be disabled.
    private bool IsCheckboxDisabled(Event holiday)
    {
        return !IsFutureDate(holiday.Date) || (SelectedCount >= MaxSelections && !holiday.IsSelected);
    }

    // Updates the selection state, ensuring no more than two holidays are selected.
    private async Task UpdateSelectionAsync()
    {
        if (SelectedCount > MaxSelections)
        {
            var firstSelected = OptionalHolidays
                .Where(h => h.IsSelected && IsFutureDate(h.Date))
                .OrderBy(h => DateTime.Parse(h.Date))
                .FirstOrDefault();
            if (firstSelected != null)
            {
                firstSelected.IsSelected = false;
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    // Saves the selected optional holidays to the API.
    private async Task SaveSelectionAsync()
    {
        try
        {
            var selectedHolidays = OptionalHolidays
                .Where(h => h.IsSelected)
                .Select(h => new { h.Date, EventName = h.Description })
                .ToArray();

            foreach (var holiday in OptionalHolidays)
            {
                if (!holiday.IsSelected)
                {
                    var savedHoliday = SavedHolidays.FirstOrDefault(s => s.Date == holiday.Date);
                    if (savedHoliday != null)
                    {
                        var response = await HttpClient.DeleteAsync(
                            $"http://localhost:5243/api/SavedHolidays/{savedHoliday.Id}");
                        if (!response.IsSuccessStatusCode)
                        {
                            ErrorMessage = $"Failed to delete holiday with ID {savedHoliday.Id}. " +
                                           $"Status: {response.StatusCode}";
                            return;
                        }
                    }
                }
            }

            var postResponse = await HttpClient.PostAsJsonAsync(
                "http://localhost:5243/api/SavedHolidays", selectedHolidays);
            if (!postResponse.IsSuccessStatusCode)
            {
                ErrorMessage = $"Failed to save holidays. Status: {postResponse.StatusCode}";
                return;
            }

            IsSnackbarVisible = true;
            await FetchHolidaysAsync();
            await Task.Delay(SnackbarDurationMs);
            IsSnackbarVisible = false;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error updating selection: {ex.Message}";
        }
        await InvokeAsync(StateHasChanged);
    }

    // Formats a date string without the day of the week.
    private string FormatDateWithoutDay(string date)
    {
        if (DateTime.TryParse(date, out DateTime parsedDate))
        {
            return $"{parsedDate.Day:D2}/{parsedDate.Month:D2}/{parsedDate.Year}";
        }
        return date;
    }

    // Gets the day of the week for a given date.
    private string GetDayOfWeek(string date)
    {
        if (DateTime.TryParse(date, out DateTime parsedDate))
        {
            return parsedDate.DayOfWeek.ToString();
        }
        return string.Empty;
    }

    // Disposes of the refresh timer.
    public void Dispose()
    {
        if (_refreshTimer != null)
        {
            _refreshTimer.Stop();
            _refreshTimer.Dispose();
        }
    }
}