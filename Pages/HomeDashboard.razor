@page "/home"
@using Components.sidebar
@layout HomeLayout
@inject AuthService AuthService
@inject IJSRuntime JSRuntime
@inject EmployeeService EmployeeService

<MudText Typo="Typo.h4">Dashboard</MudText>

@* Displaying the role-based welcome message *@
@if (!string.IsNullOrEmpty(userName))
{
    <MudText>Hello,@userName!</MudText>
}
else
{
    <MudText>Welcome to the dashboard!</MudText>
}
@if (!string.IsNullOrEmpty(userRole))
{
    <MudTex>Role:@userRole</MudTex>
}
@code {
    private string userRole;
    private string userName;
    protected override async Task OnInitializedAsync()
    {
        userRole = await GetUserRoleFromSupabase();
        await LoadUserName();
    }

    private async Task<string> GetUserRoleFromSupabase()
    {
        var (role, error) = await AuthService.VerifyToken();
        return !string.IsNullOrEmpty(role) ? role : "Unknown";
    }
    
    private async Task LoadUserName()
    {
        try
        {
            var email = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "email");

            if (!string.IsNullOrWhiteSpace(email))
            {
                var employee = await EmployeeService.GetEmployeeDetailsByEmail(email);

                if (employee != null && !string.IsNullOrWhiteSpace(employee.FirstName))
                {
                    userName = employee.FirstName;
                }
                else
                {
                    userName = GetInitialFromEmail(email);
                }
            }
            else
            {
                userName = "Guest";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user name: {ex.Message}");
            userName = "Guest";
        }
    }

    private string GetInitialFromEmail(string email)
    {
        return !string.IsNullOrWhiteSpace(email) ? email.Substring(0, 1).ToUpper() : "G";
    }
}